// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/access/Ownable.sol";
import "./lib/BrevisAppZkOnly.sol";

// Only accept ZK-attested results.
contract LiquidityZkOnly is BrevisAppZkOnly, Ownable {
    event LiquidityAttested(address account,  uint64 blockNum, uint128 liquidity);

    bytes32 public vkHash;

    constructor(address _brevisRequest) BrevisAppZkOnly(_brevisRequest) Ownable(msg.sender) {}

    // BrevisRequest contract will trigger callback once ZK proof is received.
    function handleProofResult(bytes32 _vkHash, bytes calldata _circuitOutput) internal override {
        // We need to check if the verifying key that Brevis used to verify the proof generated by our circuit is indeed
        // our designated verifying key. This proves that the _circuitOutput is authentic
        require(vkHash == _vkHash, "invalid vk");
        (address pool, uint64 blockNum, uint128 liquidity) = decodeOutput(_circuitOutput);
        emit LiquidityAttested(pool, blockNum, liquidity);
    }

    // In app circuit we have:
    // api.OutputAddress(tx.From)
    // api.OutputUint(64, tx.BlockNum)
    function decodeOutput(bytes calldata o) internal pure returns (address, uint64, uint128) {
        address pool = address(bytes20(o[0:20])); // txFrom was output as an address
        uint64 blockNum = uint64(bytes8(o[20:28])); // blockNum was output as a uint64 (8 bytes)
        uint128 liquidity = uint64(bytes8(o[20:28])); // blockNum was output as a uint64 (8 bytes)

        return (pool, blockNum, liquidity);
    }

    // vkHash represents the unique circuit app logic
    function setVkHash(bytes32 _vkHash) external onlyOwner {
        vkHash = _vkHash;
    }
}
