{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/AccountAge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./lib/BrevisApp.sol\";\n\n// Accept both ZK- and OP-attested results.\ncontract AccountAge is BrevisApp, Ownable {\n    event AccountAgeAttested(address account, uint64 blockNum);\n\n    bytes32 public vkHash;\n\n    constructor(address _brevisRequest) BrevisApp(_brevisRequest) Ownable(msg.sender) {}\n\n    // BrevisRequest contract will trigger callback once ZK proof is received.\n    function handleProofResult(bytes32 _vkHash, bytes calldata _circuitOutput) internal override {\n        // We need to check if the verifying key that Brevis used to verify the proof generated by our circuit is indeed\n        // our designated verifying key. This proves that the _circuitOutput is authentic\n        require(vkHash == _vkHash, \"invalid vk\");\n        (address txFrom, uint64 blockNum) = decodeOutput(_circuitOutput);\n        emit AccountAgeAttested(txFrom, blockNum);\n    }\n\n    // handle optimistic proof result.\n    // This example handles optimistic result in the same way as handling zk results,\n    // your app can choose to do differently.\n    function handleOpProofResult(bytes32 _vkHash, bytes calldata _circuitOutput) internal override {\n        handleProofResult(_vkHash, _circuitOutput);\n    }\n\n    // In app circuit we have:\n    // api.OutputAddress(tx.From)\n    // api.OutputUint(64, tx.BlockNum)\n    function decodeOutput(bytes calldata o) internal pure returns (address, uint64) {\n        address txFrom = address(bytes20(o[0:20])); // txFrom was output as an address\n        uint64 blockNum = uint64(bytes8(o[20:28])); // blockNum was output as a uint64 (8 bytes)\n        return (txFrom, blockNum);\n    }\n\n    // vkHash represents the unique circuit app logic\n    function setVkHash(bytes32 _vkHash) external onlyOwner {\n        vkHash = _vkHash;\n    }\n\n    /**\n     * @notice config params to handle optimitic proof result\n     * @param _challengeWindow The challenge window to accept optimistic result. 0: POS, maxInt: disable optimistic result\n     * @param _sigOption bitmap to express expected sigs: bit 0 is bvn, bit 1 is avs\n     */\n    function setBrevisOpConfig(uint64 _challengeWindow, uint8 _sigOption) external onlyOwner {\n        brevisOpConfig = BrevisOpConfig(_challengeWindow, _sigOption);\n    }\n}\n"
    },
    "contracts/AccountAgeZkOnly.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./lib/BrevisAppZkOnly.sol\";\n\n// Only accept ZK-attested results.\ncontract AccountAgeZkOnly is BrevisAppZkOnly, Ownable {\n    event AccountAgeAttested(address account, uint64 blockNum);\n\n    bytes32 public vkHash;\n\n    constructor(address _brevisRequest) BrevisAppZkOnly(_brevisRequest) Ownable(msg.sender) {}\n\n    // BrevisRequest contract will trigger callback once ZK proof is received.\n    function handleProofResult(bytes32 _vkHash, bytes calldata _circuitOutput) internal override {\n        // We need to check if the verifying key that Brevis used to verify the proof generated by our circuit is indeed\n        // our designated verifying key. This proves that the _circuitOutput is authentic\n        require(vkHash == _vkHash, \"invalid vk\");\n        (address txFrom, uint64 blockNum) = decodeOutput(_circuitOutput);\n        emit AccountAgeAttested(txFrom, blockNum);\n    }\n\n    // In app circuit we have:\n    // api.OutputAddress(tx.From)\n    // api.OutputUint(64, tx.BlockNum)\n    function decodeOutput(bytes calldata o) internal pure returns (address, uint64) {\n        address txFrom = address(bytes20(o[0:20])); // txFrom was output as an address\n        uint64 blockNum = uint64(bytes8(o[20:28])); // blockNum was output as a uint64 (8 bytes)\n        return (txFrom, blockNum);\n    }\n\n    // vkHash represents the unique circuit app logic\n    function setVkHash(bytes32 _vkHash) external onlyOwner {\n        vkHash = _vkHash;\n    }\n}\n"
    },
    "contracts/lib/BrevisApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\n// App that accepts both ZK- and OP-attested results.\nabstract contract BrevisApp {\n    address public brevisRequest;\n\n    struct BrevisOpConfig {\n        uint64 challengeWindow;\n        uint8 sigOption; // bitmap to express expected sigs: bit 0 is bvn, bit 1 is avs\n    }\n    // default: disable OP, require bvn sig\n    BrevisOpConfig public brevisOpConfig = BrevisOpConfig(2 ** 64 - 1, 0x01);\n\n    modifier onlyBrevisRequest() {\n        require(msg.sender == brevisRequest, \"invalid caller\");\n        _;\n    }\n\n    constructor(address _brevisRequest) {\n        brevisRequest = _brevisRequest;\n    }\n\n    function handleProofResult(bytes32 _vkHash, bytes calldata _appCircuitOutput) internal virtual {\n        // to be overrided by custom app\n    }\n\n    function handleOpProofResult(bytes32 _vkHash, bytes calldata _appCircuitOutput) internal virtual {\n        // to be overrided by custom app\n    }\n\n    function brevisCallback(bytes32 _appVkHash, bytes calldata _appCircuitOutput) external onlyBrevisRequest {\n        handleProofResult(_appVkHash, _appCircuitOutput);\n    }\n\n    function brevisBatchCallback(\n        bytes32[] calldata _appVkHashes,\n        bytes[] calldata _appCircuitOutputs\n    ) external onlyBrevisRequest {\n        for (uint i = 0; i < _appVkHashes.length; i++) {\n            handleProofResult(_appVkHashes[i], _appCircuitOutputs[i]);\n        }\n    }\n\n    function applyBrevisOpResult(\n        bytes32 _proofId,\n        uint64 _nonce,\n        bytes32 _appVkHash,\n        bytes32 _appCommitHash,\n        bytes calldata _appCircuitOutput\n    ) public {\n        (uint256 challengeWindow, uint8 sigOption) = _getBrevisConfig();\n        require(\n            IBrevisRequest(brevisRequest).validateOpAppData(\n                _proofId,\n                _nonce,\n                _appCommitHash,\n                _appVkHash,\n                challengeWindow,\n                sigOption\n            ),\n            \"data not ready to use\"\n        );\n        require(_appCommitHash == keccak256(_appCircuitOutput), \"invalid circuit output\");\n        handleOpProofResult(_appVkHash, _appCircuitOutput);\n    }\n\n    function applyBrevisOpResults(\n        bytes32[] calldata _proofIds,\n        uint64[] calldata _nonces,\n        bytes32[] calldata _appVkHashes,\n        bytes32[] calldata _appCommitHashes,\n        bytes[] calldata _appCircuitOutputs\n    ) external {\n        (uint256 challengeWindow, uint8 sigOption) = _getBrevisConfig();\n        require(\n            IBrevisRequest(brevisRequest).validateOpAppData(\n                _proofIds,\n                _nonces,\n                _appCommitHashes,\n                _appVkHashes,\n                challengeWindow,\n                sigOption\n            ),\n            \"data not ready to use\"\n        );\n        for (uint256 i = 0; i < _proofIds.length; i++) {\n            require(_appCommitHashes[i] == keccak256(_appCircuitOutputs[i]), \"invalid circuit output\");\n            handleOpProofResult(_appVkHashes[i], _appCircuitOutputs[i]);\n        }\n    }\n\n    function _getBrevisConfig() private view returns (uint256, uint8) {\n        BrevisOpConfig memory config = brevisOpConfig;\n        return (uint256(config.challengeWindow), config.sigOption);\n    }\n}\n\ninterface IBrevisRequest {\n    function validateOpAppData(\n        bytes32 _proofId,\n        uint64 _nonce,\n        bytes32 _appCommitHash,\n        bytes32 _appVkHash,\n        uint256 _appChallengeWindow,\n        uint8 _option\n    ) external view returns (bool);\n\n    function validateOpAppData(\n        bytes32[] calldata _proofIds,\n        uint64[] calldata _nonces,\n        bytes32[] calldata _appCommitHashes,\n        bytes32[] calldata _appVkHashes,\n        uint256 _appChallengeWindow,\n        uint8 _option\n    ) external view returns (bool);\n}\n"
    },
    "contracts/lib/BrevisAppZkOnly.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\n// App that only accepts ZK-attested results.\nabstract contract BrevisAppZkOnly {\n    address public brevisRequest;\n\n    modifier onlyBrevisRequest() {\n        require(msg.sender == brevisRequest, \"invalid caller\");\n        _;\n    }\n\n    constructor(address _brevisRequest) {\n        brevisRequest = _brevisRequest;\n    }\n\n    function handleProofResult(bytes32 _vkHash, bytes calldata _appCircuitOutput) internal virtual {\n        // to be overrided by custom app\n    }\n\n    function brevisCallback(bytes32 _appVkHash, bytes calldata _appCircuitOutput) external onlyBrevisRequest {\n        handleProofResult(_appVkHash, _appCircuitOutput);\n    }\n\n    function brevisBatchCallback(\n        bytes32[] calldata _appVkHashes,\n        bytes[] calldata _appCircuitOutputs\n    ) external onlyBrevisRequest {\n        for (uint i = 0; i < _appVkHashes.length; i++) {\n            handleProofResult(_appVkHashes[i], _appCircuitOutputs[i]);\n        }\n    }\n}\n"
    },
    "contracts/LiquidityZkOnly.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./lib/BrevisAppZkOnly.sol\";\n\n// Only accept ZK-attested results.\ncontract LiquidityZkOnly is BrevisAppZkOnly, Ownable {\n    event LiquidityAttested(address account,  uint64 blockNum, uint128 liquidity);\n\n    bytes32 public vkHash;\n\n    constructor(address _brevisRequest) BrevisAppZkOnly(_brevisRequest) Ownable(msg.sender) {}\n\n    // BrevisRequest contract will trigger callback once ZK proof is received.\n    function handleProofResult(bytes32 _vkHash, bytes calldata _circuitOutput) internal override {\n        // We need to check if the verifying key that Brevis used to verify the proof generated by our circuit is indeed\n        // our designated verifying key. This proves that the _circuitOutput is authentic\n        require(vkHash == _vkHash, \"invalid vk\");\n        (address pool, uint64 blockNum, uint128 liquidity) = decodeOutput(_circuitOutput);\n        emit LiquidityAttested(pool, blockNum, liquidity);\n    }\n\n    // In app circuit we have:\n    // api.OutputAddress(tx.From)\n    // api.OutputUint(64, tx.BlockNum)\n    function decodeOutput(bytes calldata o) internal pure returns (address, uint64, uint128) {\n        address pool = address(bytes20(o[0:20])); // txFrom was output as an address\n        uint64 blockNum = uint64(bytes8(o[20:28])); // blockNum was output as a uint64 (8 bytes)\n        uint128 liquidity = uint64(bytes8(o[20:28])); // blockNum was output as a uint64 (8 bytes)\n\n        return (pool, blockNum, liquidity);\n    }\n\n    // vkHash represents the unique circuit app logic\n    function setVkHash(bytes32 _vkHash) external onlyOwner {\n        vkHash = _vkHash;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}